#!/usr/bin/bash

# if this usb device is connected to the host the vm will be terminated (the host must not have crashed and the usb port must not be passed through to the guest)
killSwitchVendorID="XXXX"
killSwitchProductId="XXXX"

# virsh applies localization to returned values, this array should contain equivalents to 'shutoff' in different languages
# en-us, pt-br
shutoffWords=("shutoff" "desligado")

# assumes the vm is not available
isVMAvailable=0

# assumes the vm is not running
isVMRunning=0

# stops if not running as root
if [ ! $(whoami) == "root" ]; then
    echo "This script should be run as root, as it needs to start and stop system services."
    exit 1
fi

# stops if the vm name was not specified
if [ "$1" == "" ]; then
    echo "No virtual machine name specified."
    exit 1
fi

# gets the availability of the vm
for word in ${shutoffWords[@]}; do
    if [[ $word == $(virsh domstate "$1") ]]; then
        isVMAvailable=1
        break
    fi
done

# prevents starting a running or inexistent vm
if [[ $isVMAvailable != 1 ]]; then
    echo "The specified virtual machine is not available"
    exit 1
fi

# sends confirmation message
echo "Finishing the display manager in 10 seconds, you can exit the terminal if you want"
sleep 10

# stops the display manager
systemctl stop display-manager
sleep 5

# changes to another tty
chvt 2
sleep 5

# terminate all remaining user processes
pkill -TERM -u "$2" # try terminating them nicely first
sleep 5
pkill -KILL -u "$2" # then kill the persistent ones
sleep 5

# drops caches
# echo 3 > /proc/sys/vm/drop_caches

# compacts memory
# echo 1 > /proc/sys/vm/compact_memory

# allocates hugepages
# sysctl vm.nr_hugepages=4096

# reduce VM jitter? https://rokups.github.io/#!pages/gaming-vm-performance.md
sysctl vm.stat_interval=300

# lock writeback to using only host-specific cores
# echo 88 > /sys/bus/workqueue/devices/writeback/cpumask

# changes the cpu frequency governor to performance
systemctl start perfgovernor

# starts the specified vm
virsh start "$1"
isVMRunning=1

# waits some time before starting to check if the VM has stopped
sleep 5
# checks if the VM has stopped at every 5 seconds
while [[ $isVMRunning == 1 ]]; do
    # gets the vm running state
    for word in ${shutoffWords[@]}; do
        if [[ $word == $(virsh domstate "$1") ]]; then
            isVMRunning=0
            break
        fi
    done
    
    # checks the presence of the specified usb killswitch
    if [[ $(awk '$2 == "Vendor='$killSwitchVendorID'" && $3 == "ProdID='$killSwitchProductId'" { print $0 }' /sys/kernel/debug/usb/devices) != "" ]]; then 
        virsh destroy "$1"
        # don't interfere with isVMRunning here, wait for libvirt to kill the VM
    fi
    
    # waits some time before trying again
    sleep 5
done

# waits 5 seconds for the gpu to be returned to the host
sleep 5

# changes the cpu frequency governor back to powersave
systemctl stop perfgovernor

# unlock writeback to use all cores
# echo ff > /sys/bus/workqueue/devices/writeback/cpumask

# restore reduce jitter workaround
sysctl vm.stat_interval=1

# free hugepages
# sysctl vm.nr_hugepages=0

# starts the display manager again
systemctl start display-manager
