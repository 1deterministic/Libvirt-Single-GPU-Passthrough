#!/usr/bin/bash

# to run this file use something like this:
# sudo systemctl start lsgp@$virtualmachine.service

echo "Starting virtual machine '$1' using lsgp"

# location of the config file
config="/etc/lsgp.conf"

# virsh applies localization to returned values, this array should contain equivalents to 'shutoff' in different languages
# en-us, pt-br
shutoffWords=("shutoff" "desligado")

# assumes the vm is not available
isVMAvailable=0

# assumes the vm is not running
isVMRunning=0

# location of the lock file
lockFile="/tmp/lsgp.lock"

# stops if the config file is missing
if [[ ! -f "$config" ]]; then
    echo "Missing config file at $config"
    exit 1
else
    echo "Loading config file from $config"
    source "$config"
fi

# stops if not running as root
if [[ ! $(whoami) == "root" ]]; then
    echo "This script should be run as root"
    exit 1
fi

# stops if the vm name was not specified
if [[ "$1" == "" ]]; then
    echo "No virtual machine name specified"
    exit 1
fi

# stops if the username to logout is root - logging out the root user will cause the machine to shutdown
if [[ "$username" == "root" ]]; then
    echo "Username cannot be root in the config file, please change to the unprivileged user you want to logout or leave it empty (can cause problems when returning to the host)"
    exit 1
fi

# gets the availability of the vm
for word in "${shutoffWords[@]}"; do
    if [[ "$word" == $(virsh domstate "$1") ]]; then
        isVMAvailable=1
        break
    fi
done

# prevents starting a running or inexistent vm
if [[ "$isVMAvailable" != 1 ]]; then
    echo "The specified virtual machine is not available - either it doesn't exist or is already running"
    exit 1
fi

# creates the lock file
if [[ -f "$lockFile" ]]; then
    echo "Lockfile at $lockFile is present, which means that there is another lsgp VM running, stopping here to prevent any problems"
    exit 1
else
    echo "Creating lock file at $lockFile"
    touch "$lockFile"
fi

# logout the user
if [[ "$username" != "" ]]; then
    # wait some time before logging out the user
    echo "Waiting 5 seconds before logging out the user"
    sleep 5

    # logout user
    echo "Logging out $username now"
    pkill -TERM -u "$username"
    sleep 5
fi

# stops the display manager
echo "Stopping the display manager"
systemctl stop display-manager
sleep 5

# if using plasma, kwin may crash when sddm is stopped
if [[ $(pgrep -f kwin_x11) != "" ]]; then
    echo "Kwin is still running, killing it"
    sudo pkill -KILL kwin_x11
fi

# if using hugepages
if [[ "$hugepages" != "" && "$hugepages" > 0 ]]; then
    # drops caches
    echo "Dropping caches from memory"
    echo 3 > "/proc/sys/vm/drop_caches"

    # compacts memory
    echo "Compacting memory to allocate hugepages"
    echo 1 > "/proc/sys/vm/compact_memory"

    # allocates 4096 pages of 2MiB each = 8GiB
    echo "Allocating hugepages"
    sysctl vm.nr_hugepages=$hugepages
fi

# reduce VM jitter? https://rokups.github.io/#!pages/gaming-vm-performance.md
echo "Reducing stat interval"
sysctl vm.stat_interval=300

# if restricting writeback
if [[ "$writeback" != "" ]]; then
    oldWritebackCpumask=$(cat "/sys/bus/workqueue/devices/writeback/cpumask")

    echo "Binding writeback cores to host reserved cores"
    echo "$writeback" > "/sys/bus/workqueue/devices/writeback/cpumask"
fi

# if changing the CPU governor
if [[ "$cpugovernor" != "" ]]; then
    # stores the old cpu governor
    oldCpuGovernor=$(cat "/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor")
    
    # changes the cpu frequency governor
    echo "Activating desired CPU governor"
    for i in "/sys/devices/system/cpu/cpu"[0-9]*"/cpufreq/scaling_governor"; do
        echo "$cpugovernor" > "$i"
    done
fi

# starts the specified vm
echo "Starting the VM"
virsh start "$1"
isVMRunning=1

# waits some time before starting to check if the VM has stopped
sleep 30

# checks if the VM has stopped at every 5 seconds
while [[ "$isVMRunning" == 1 ]]; do
    # gets the vm running state
    for word in "${shutoffWords[@]}"; do
        if [[ "$word" == $(virsh domstate "$1") ]]; then
            echo "VM has stopped, returning to host"
            isVMRunning=0
            break
        fi
    done
    
    if [[ "$killswitch" != "" ]]; then
        # checks the presence of the specified usb killswitch
        if [[ $(awk '$2 == "Vendor='$(awk -F: '{ print $1 }' <<< "$killswitch")'" && $3 == "ProdID='$(awk -F: '{ print $2 }' <<< "$killswitch")'" { print $0 }' "/sys/kernel/debug/usb/devices") != "" ]]; then 
            echo "Killswitch plugged in, killing the VM"
            virsh destroy "$1"
            # don't interfere with isVMRunning here, wait for libvirt to kill the VM
        fi
    fi
    
    # waits some time before the next check
    sleep 5
done

# waits 5 seconds for the gpu to be returned to the host
sleep 5

# if changing the CPU governor
if [[ "$cpugovernor" != "" ]]; then
    # changes the cpu frequency governor back
    echo "Restoring powersave CPU governor"
    for i in "/sys/devices/system/cpu/cpu"[0-9]*"/cpufreq/scaling_governor"; do
        echo "$oldCpuGovernor" > "$i"
    done
fi

# if restricting writeback
if [[ "$writeback" != "" ]]; then
    # restores writeback cpumask to default
    echo "Restoring writeback configuration"
    echo "$oldWritebackCpumask" > "/sys/bus/workqueue/devices/writeback/cpumask"
fi

# restore reduce jitter workaround
echo "Restoring stat interval"
sysctl vm.stat_interval=1

# if using hugepages
if [[ "$hugepages" != "" && "$hugepages" > 0 ]]; then
    # free hugepages
    echo "Removing hugepages"
    sysctl vm.nr_hugepages=0
fi

# starts the display manager again
echo "Starting display manager again"
systemctl start display-manager

# removes the lock file
if [[ -f "$lockFile" ]]; then
    echo "Removing lock file"
    rm "$lockFile"
else
    echo "Lock file at $lockFile is missing, something weird happened :|"
    exit 1
fi

echo "Finished!"
